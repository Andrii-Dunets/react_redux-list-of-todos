{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","defaultState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","useState","visibleTodos","setVisibleTodos","dispatch","useEffect","filteredTodos","completed","length","className","map","id","classNames","title","onClick","handleAddCurrent","TodoFilter","onSubmit","event","preventDefault","onChange","handleStatus","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","currentUser","setCurrentUser","fetchUser","a","userFromServer","userId","href","email","name","App","fetchTodos","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ae012f2.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/STATUS';\n  payload: Status;\n};\n\nconst setQuery = (text: string): SetQueryAction => (\n  { type: 'filter/QUERY', payload: text });\n\nconst setStatus = (value: Status): SetStatusAction => (\n  { type: 'filter/STATUS', payload: value });\n\nexport const actions = { setQuery, setStatus };\n\ntype Action = SetQueryAction | SetStatusAction;\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst defaultState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = defaultState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodosAction = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\nconst add = (todos: Todo[]): AddTodosAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { add };\n\nconst todosReducer = (todos: Todo[] = [], action: AddTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, combineReducers } from 'redux';\n// import { createStore, applyMiddleware, combineReducers } from 'redux';\n// import thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  // composeWithDevTools(\n  //   applyMiddleware(thunk),\n  // ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const status = useAppSelector(state => state.filter.status);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const dispatch = useAppDispatch();\n\n  const handleAddCurrent = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n  }, [todos]);\n\n  useEffect(() => {\n    const filteredTodos = [...todos];\n\n    switch (status) {\n      case 'active':\n        setVisibleTodos(filteredTodos.filter(todo => !todo.completed));\n        break;\n      case 'completed':\n        setVisibleTodos(filteredTodos.filter(todo => todo.completed));\n        break;\n      case 'all':\n      default:\n        setVisibleTodos(filteredTodos);\n    }\n  }, [status]);\n\n  return (\n    <>\n      {visibleTodos.length <= 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr data-cy=\"todo\">\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\"> </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames(\n                        { 'has-text-danger': todo.completed === false },\n                        { 'has-text-success': todo.completed === true },\n                      )}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleAddCurrent(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye\" />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const status = useAppSelector(state => state.filter.status);\n  const dispatch = useAppDispatch();\n\n  const handleStatus = (value: string) => {\n    switch (value) {\n      case 'active':\n        return dispatch(actions.setStatus('active'));\n\n      case 'completed':\n        return dispatch(actions.setStatus('completed'));\n\n      case 'all':\n      default:\n        return dispatch(actions.setStatus('all'));\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => handleStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\n// import { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const handleRemoveCurrent = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  const fetchUser = async (id: number) => {\n    try {\n      const userFromServer = await getUser(id);\n\n      setCurrentUser(userFromServer);\n    } catch {\n      setCurrentUser(null);\n    }\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      fetchUser(currentTodo.userId);\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {/* <Loader /> */}\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            Todo #\n            {currentTodo?.id}\n          </div>\n\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={() => handleRemoveCurrent()}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {currentTodo?.completed ? (\n              <strong className=\"has-text-success\">Done</strong>\n            ) : (\n              <strong className=\"has-text-danger\">Planned</strong>\n            )}\n            {' by '}\n            <a href={`mailto:${currentUser?.email}`}>{currentUser?.name}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n// import { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const fetchTodos = async () => {\n    try {\n      const todos = await getTodos();\n\n      dispatch(todoActions.add(todos));\n    } catch {\n      dispatch(todoActions.add([]));\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {/* <Loader /> */}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}